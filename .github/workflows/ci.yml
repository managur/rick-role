name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Tests & Quality Checks
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php: [8.4]
        # Easy to add more PHP versions:
        # php: [8.1, 8.2, 8.3, 8.4]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: |
            intl
            pdo_mysql
            pdo_pgsql
            pdo_sqlite
          coverage: xdebug
          tools: composer:v2

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-composer-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Validate composer files
        run: composer validate --strict

      - name: Run PHPStan analysis
        run: composer analyse

      - name: Check code style
        run: vendor/bin/phpcs

      - name: Run unit tests
        run: composer test -- --testsuite=Unit

      - name: Run integration tests
        run: composer test -- --testsuite=Integration

      - name: Run full test suite with coverage
        run: composer test-coverage

      - name: Upload coverage reports as artifacts
        if: env.ACTIONS_RUNTIME_TOKEN != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-php-${{ matrix.php }}-${{ github.run_id }}
          path: coverage/
          retention-days: 7
          if-no-files-found: warn

      - name: Coverage report status (Act)
        if: env.ACTIONS_RUNTIME_TOKEN == ''
        run: |
          echo "Running locally with Act - coverage reports available in coverage/ directory"
          echo "Coverage files:"
          ls -la coverage/ || echo "No coverage directory found"

      - name: Security audit
        run: composer audit --format=json --no-interaction

  quality-gates:
    name: Quality Gates (PR Only)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          extensions: |
            intl
            pdo_mysql
            pdo_pgsql
            pdo_sqlite
          tools: composer:v2

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      - name: Run comprehensive quality checks
        run: |
          echo "üîç Running PHPStan analysis..."
          composer analyse
          
          echo "üé® Checking code style..."
          vendor/bin/phpcs
          
          echo "üß™ Running all tests..."
          composer test
          
          echo "üìä Checking test coverage..."
          composer test-coverage
          
          echo "üîí Running security audit..."
          composer audit --format=json --no-interaction
          
          echo "‚úÖ All quality gates passed!"

      - name: Upload quality gates coverage reports as artifacts
        if: env.ACTIONS_RUNTIME_TOKEN != ''
        uses: actions/upload-artifact@v4
        with:
          name: quality-gates-coverage-reports-${{ github.run_id }}
          path: coverage/
          retention-days: 7
          if-no-files-found: warn

      - name: Quality gates coverage report status (Act)
        if: env.ACTIONS_RUNTIME_TOKEN == ''
        run: |
          echo "Running locally with Act - quality gates coverage reports available in coverage/ directory"
          echo "Coverage files:"
          ls -la coverage/ || echo "No coverage directory found"

  docker-test:
    name: Docker Environment Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test Docker environment
        run: |
          # Build the Docker image
          docker build -t rick-role-test .
          
          # Test that the Docker environment can run tests
          docker run --rm rick-role-test composer test -- --testsuite=Unit
          
          echo "‚úÖ Docker environment tests passed" 